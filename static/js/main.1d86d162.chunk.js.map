{"version":3,"sources":["components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Section/Section.module.css","components/Notification/Notification.module.css","components/Notification/Notification.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Section/Section.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Notification","message","className","s","notification","FeedbackOptions","onLeaveFeedback","button","onClick","Statistics","options","onTotal","onPositivePercentage","total","positivePercentage","statisticsList","statisticsListItem","good","neutral","bad","statisticsListItemTotal","statisticsListItemPositive","Section","title","onIncrement","state","section","App","handleIncrement","e","btnName","currentTarget","outerText","setState","prevState","totalScore","Object","values","reduce","option","Math","round","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d86d162.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"statisticsList\":\"Statistics_statisticsList__7E29O\",\"statisticsListItemTotal\":\"Statistics_statisticsListItemTotal__348QD\",\"statisticsListItemPositive\":\"Statistics_statisticsListItemPositive__2PCNi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__1EvL_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__271GL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Notification_notification__2hMHt\"};","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport s from './Notification.module.css';\r\n\r\nconst Notification = ({message}) => {\r\n  return (\r\n       \r\n    <p className={s.notification}>{message}</p>\r\n   \r\n  );\r\n};\r\n\r\nNotification.propTypes = {\r\nmessage:PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;","import React from \"react\";\r\nimport s from './FeedbackOptions.module.css';\r\n\r\n const FeedbackOptions = ({onLeaveFeedback}) => {\r\n\r\n  return (\r\n    <div>\r\n     <button className={s.button} onClick={onLeaveFeedback}>good</button>\r\n     <button className={s.button} onClick={onLeaveFeedback}>neutral</button> \r\n     <button className={s.button} onClick={onLeaveFeedback}>bad</button>\r\n   </div>\r\n  );\r\n}\r\n\r\n\r\nexport default FeedbackOptions;","import React from \"react\";\r\nimport s from './Statistics.module.css';\r\n\r\n\r\nexport default function Statistics({options, onTotal, onPositivePercentage}) {\r\nconst total = onTotal(options);\r\nconst positivePercentage = onPositivePercentage(options);\r\n    return (\r\n     \r\n        <ul className={s.statisticsList}>\r\n\r\n        <li className={s.statisticsListItem}>Good: {options.good} </li>\r\n        <li className={s.statisticsListItem}>Neutral: {options.neutral} </li>\r\n        <li className={s.statisticsListItem}>Bad: {options.bad}</li>\r\n        <li className={s.statisticsListItemTotal}>Total: {total}</li>\r\n        <li className={s.statisticsListItemPositive}>Positiv feedback: {positivePercentage}%</li>\r\n        </ul>\r\n    \r\n        \r\n    );\r\n}","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport s from './Section.module.css';\r\nimport Notification from \"../Notification/Notification\";\r\nimport FeedbackOptions from \"../FeedbackOptions/FeedbackOptions\";\r\nimport Statistics from \"../Statistics/Statistics\";\r\n\r\nconst Section = ({title, onIncrement, state, onTotal, onPositivePercentage} ) => {\r\n  return (\r\n    <div>\r\n    <section className={s.section}>{title[0]}\r\n    \r\n    <FeedbackOptions onLeaveFeedback={onIncrement}/>\r\n    \r\n    </section>\r\n   \r\n   <section className={s.section}>{onTotal(state) === 0 ? '' : title[1]}\r\n    {onTotal(state) === 0  ? <Notification message=\"No feedback given...\"/> : <Statistics options= {state} onTotal={onTotal} onPositivePercentage={onPositivePercentage} />  }\r\n    </section>\r\n   </div>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title:PropTypes.array.isRequired,\r\n  onIncrement: PropTypes.func.isRequired,\r\n  state: PropTypes.object.isRequired,\r\n  onTotal: PropTypes.func.isRequired,\r\n  onPositivePercentage:PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Section;","import React, { Component } from 'react';\nimport './App.css';\nimport Section from './components/Section/Section';\n\n\nclass App extends Component {\n\n  //  static defaultProps = {\n  //   initialRatingGood: 0,\n  //   initialRatingNeutral: 0,\n  //   initialRatingBad: 0,\n  // };\n\n  // static propTypes = {\n  //   //\n  // };\n\n  state = { \n    good: 0,\n    neutral:0,\n    bad:0,\n  };\n\n  handleIncrement = (e) => {\n       const  btnName =e.currentTarget.outerText; \n          if (btnName === 'good') {\n            this.setState( prevState => ({\n                good : prevState.good + 1,  \n            }));\n          }\n          if (btnName === 'neutral') {\n            this.setState(prevState => ({\n                neutral: prevState.neutral + 1,  \n            })); \n          }\n          if (btnName === 'bad') {\n          this.setState(prevState => ({\n              bad : prevState.bad + 1,  \n          }));\n        }\n          \n  };\n\n  totalScore = (state) => Object.values(this.state).reduce((total, option)=>(total+=option),0);\n  positivePercentage = (state)=> Math.round((this.state.good/this.totalScore())*100);\nrender () {\n \n  return (\n\n    <div className=\"App\">\n      <Section title={[\"Please leave feedback\", \"Statistics\"]} \n       onIncrement= {this.handleIncrement} \n      state={this.state}\n      onTotal= {this.totalScore} \n      onPositivePercentage={this.positivePercentage}\n            \n      />\n    </div>\n  );\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}